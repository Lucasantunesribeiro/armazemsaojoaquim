import { createClient } from '@supabase/supabase-js'
import { Database } from '../types/database.types'

// Temporariamente comentado para debug
// Importar polyfills apenas no servidor
// if (typeof window === 'undefined') {
//   require('./polyfills-minimal.js')
// }

// Verificar se as vari√°veis de ambiente est√£o configuradas
export const isSupabaseConfigured = () => {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL
  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  
  return !!(url && key && url !== 'your_supabase_url' && key !== 'your_supabase_anon_key')
}

// Fun√ß√£o para criar cliente mock quando Supabase n√£o est√° configurado
function createMockClient() {
  const mockResponse = {
    data: [],
    error: null,
    count: 0,
    status: 200,
    statusText: 'OK'
  }

  const mockQuery = {
    select: () => mockQuery,
    insert: () => mockQuery,
    update: () => mockQuery,
    delete: () => mockQuery,
    eq: () => mockQuery,
    neq: () => mockQuery,
    gt: () => mockQuery,
    gte: () => mockQuery,
    lt: () => mockQuery,
    lte: () => mockQuery,
    like: () => mockQuery,
    ilike: () => mockQuery,
    is: () => mockQuery,
    in: () => mockQuery,
    contains: () => mockQuery,
    containedBy: () => mockQuery,
    rangeGt: () => mockQuery,
    rangeGte: () => mockQuery,
    rangeLt: () => mockQuery,
    rangeLte: () => mockQuery,
    rangeAdjacent: () => mockQuery,
    overlaps: () => mockQuery,
    textSearch: () => mockQuery,
    match: () => mockQuery,
    not: () => mockQuery,
    or: () => mockQuery,
    filter: () => mockQuery,
    order: () => mockQuery,
    limit: () => mockQuery,
    range: () => mockQuery,
    single: () => Promise.resolve({ ...mockResponse, data: null }),
    maybeSingle: () => Promise.resolve({ ...mockResponse, data: null }),
    csv: () => Promise.resolve({ ...mockResponse, data: '' }),
    geojson: () => Promise.resolve({ ...mockResponse, data: {} }),
    explain: () => Promise.resolve({ ...mockResponse, data: '' }),
    rollback: () => Promise.resolve({ ...mockResponse }),
    returns: () => mockQuery,
    then: (resolve: any) => resolve(mockResponse),
    catch: (reject: any) => mockResponse
  }

  return {
    from: () => mockQuery,
    rpc: () => Promise.resolve(mockResponse),
    storage: {
      from: () => ({
        upload: () => Promise.resolve(mockResponse),
        download: () => Promise.resolve(mockResponse),
        list: () => Promise.resolve(mockResponse),
        remove: () => Promise.resolve(mockResponse),
        createSignedUrl: () => Promise.resolve({ ...mockResponse, data: { signedUrl: '' } }),
        createSignedUrls: () => Promise.resolve({ ...mockResponse, data: [] }),
        getPublicUrl: () => ({ data: { publicUrl: '' } })
      })
    },
    auth: {
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
      getUser: () => Promise.resolve({ data: { user: null }, error: null }),
      signUp: () => Promise.resolve({ data: { user: null, session: null }, error: null }),
      signInWithPassword: () => Promise.resolve({ data: { user: null, session: null }, error: null }),
      signInWithOAuth: () => Promise.resolve({ data: { user: null, session: null }, error: null }),
      signOut: () => Promise.resolve({ error: null }),
      resetPasswordForEmail: () => Promise.resolve({ data: {}, error: null }),
      updateUser: () => Promise.resolve({ data: { user: null }, error: null }),
      setSession: () => Promise.resolve({ data: { session: null }, error: null }),
      refreshSession: () => Promise.resolve({ data: { session: null }, error: null }),
      onAuthStateChange: () => ({
        data: { subscription: { unsubscribe: () => {} } },
        error: null
      }),
      admin: {
        listUsers: () => Promise.resolve({ data: { users: [] }, error: null }),
        createUser: () => Promise.resolve({ data: { user: null }, error: null }),
        deleteUser: () => Promise.resolve({ data: { user: null }, error: null }),
        updateUserById: () => Promise.resolve({ data: { user: null }, error: null })
      }
    },
    realtime: {
      channel: () => ({
        on: () => ({}),
        subscribe: () => ({}),
        unsubscribe: () => ({}),
        send: () => ({})
      }),
      removeChannel: () => ({}),
      removeAllChannels: () => ({}),
      getChannels: () => []
    },
    functions: {
      invoke: () => Promise.resolve({ data: null, error: null })
    }
  }
}

// Configura√ß√£o do cliente Supabase com tratamento de erro
let supabase: any

try {
  if (isSupabaseConfigured()) {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    const supabaseServiceKey = process.env.NEXT_PUBLIC_SUPABASE_SERVICE_KEY
    
    supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
      auth: {
        persistSession: typeof window !== 'undefined',
        autoRefreshToken: typeof window !== 'undefined',
        detectSessionInUrl: typeof window !== 'undefined',
        flowType: 'pkce',
        storage: typeof window !== 'undefined' ? window.localStorage : undefined,
        storageKey: 'armazem-sao-joaquim-auth',
        debug: process.env.NODE_ENV === 'development'
      },
      realtime: {
        params: {
          eventsPerSecond: 10
        }
      },
      global: {
        headers: {
          'X-Client-Info': 'armazem-sao-joaquim',
          'apikey': supabaseAnonKey
        }
      }
    })

    // Wrapper para signOut com fallback
    const originalSignOut = supabase.auth.signOut
    supabase.auth.signOut = async (options?: { scope?: 'global' | 'local' }) => {
      try {
        console.log('üîÑ Tentando logout...', options)
        const result = await originalSignOut.call(supabase.auth, options)
        
        if (result.error) {
          console.warn('‚ö†Ô∏è Erro no logout do servidor, fazendo limpeza local:', result.error)
          
          // Fallback: limpar sess√£o localmente
          if (typeof window !== 'undefined') {
            localStorage.removeItem('armazem-sao-joaquim-auth')
            localStorage.removeItem('sb-enolssforaepnrpfrima-auth-token')
            sessionStorage.clear()
          }
          
          // Retornar sucesso mesmo com erro do servidor
          return { error: null }
        }
        
        console.log('‚úÖ Logout realizado com sucesso')
        return result
      } catch (error) {
        console.error('‚ùå Erro inesperado no logout:', error)
        
        // Fallback: limpar sess√£o localmente
        if (typeof window !== 'undefined') {
          localStorage.removeItem('armazem-sao-joaquim-auth')
          localStorage.removeItem('sb-enolssforaepnrpfrima-auth-token')
          sessionStorage.clear()
        }
        
        // Retornar sucesso para n√£o bloquear o usu√°rio
        return { error: null }
      }
    }

    // Wrapper para signUp com estrat√©gias avan√ßadas baseadas na documenta√ß√£o oficial
    const originalSignUp = supabase.auth.signUp
    supabase.auth.signUp = async (credentials: any) => {
      try {
        console.log('üîÑ Tentando registro...', { email: credentials.email })
        
        const result = await originalSignUp.call(supabase.auth, credentials)
        
        // Se houve erro 500 ou relacionado a servidor/email, usar estrat√©gias documentadas
        if (result.error && (
          result.error.message?.includes('500') ||
          result.error.message?.includes('Internal Server Error') ||
          result.error.message?.includes('Error sending confirmation email') ||
          result.error.message?.includes('Database error') ||
          result.error.message?.includes('SMTP') ||
          result.error.status === 500
        )) {
          console.log('‚ö†Ô∏è Erro 500/servidor detectado, aplicando estrat√©gias de contorno...', result.error)
          
          // Estrat√©gia 1: Usar Admin API (contorna problemas de schema/constraints)
          console.log('üîÑ Estrat√©gia 1: Usando Admin API para bypass de constraints...')
          try {
            const adminResult = await fetch(`${supabaseUrl}/auth/v1/admin/users`, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${supabaseServiceKey || supabaseAnonKey}`,
                'Content-Type': 'application/json',
                'apikey': supabaseAnonKey
              },
              body: JSON.stringify({
                email: credentials.email,
                password: credentials.password,
                user_metadata: credentials.options?.data || {},
                email_confirm: false // Evita problemas SMTP
              })
            })
            
            if (adminResult.ok) {
              const adminData = await adminResult.json()
              console.log('‚úÖ Estrat√©gia 1 bem-sucedida via Admin API')
              
              return {
                data: {
                  user: adminData,
                  session: null // Usu√°rio precisa fazer login ap√≥s cria√ß√£o
                },
                error: null
              }
            }
          } catch (adminError) {
            console.log('‚ö†Ô∏è Estrat√©gia 1 falhou:', adminError)
          }
          
          // Estrat√©gia 2: Registro direto na tabela (√∫ltimo recurso)
          console.log('üîÑ Estrat√©gia 2: Registro direto na tabela auth.users...')
          try {
            const userId = crypto.randomUUID()
            const hashedPassword = await hashPassword(credentials.password)
            
            const { data: directInsert, error: insertError } = await supabase
              .from('auth.users')
              .insert({
                id: userId,
                email: credentials.email,
                encrypted_password: hashedPassword,
                email_confirmed_at: null,
                raw_user_meta_data: credentials.options?.data || {},
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              })
              .select()
              .single()
            
            if (!insertError) {
              console.log('‚úÖ Estrat√©gia 2 bem-sucedida via inser√ß√£o direta')
              
              return {
                data: {
                  user: directInsert,
                  session: null
                },
                error: null
              }
            }
          } catch (directError) {
            console.log('‚ö†Ô∏è Estrat√©gia 2 falhou:', directError)
          }
          
          // Estrat√©gia 3: Assumir sucesso parcial (conta pode ter sido criada)
          console.log('üéØ Estrat√©gia 3: Assumindo sucesso parcial - conta provavelmente criada')
          
          // Verificar se usu√°rio j√° existe
          try {
            const { data: existingUser } = await supabase
              .from('auth.users')
              .select('id, email, email_confirmed_at')
              .eq('email', credentials.email)
              .single()
            
            if (existingUser) {
              console.log('‚úÖ Conta encontrada - registro foi bem-sucedido apesar do erro')
              return {
                data: {
                  user: existingUser,
                  session: null
                },
                error: null
              }
            }
          } catch (checkError) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar se conta existe:', checkError)
          }
          
          // Se todas as estrat√©gias falharam, retornar erro customizado mais √∫til
          return {
            data: { user: null, session: null },
            error: {
              ...result.error,
              message: `Erro 500 do servidor Supabase. Poss√≠veis causas: 
              1. Problema no schema de autentica√ß√£o
              2. Constraints de foreign key bloqueando auth.users  
              3. Triggers personalizados com erro
              4. Configura√ß√£o SMTP incorreta
              5. Sobrecarga do servidor
              
              Tente novamente em alguns minutos ou contate o suporte.`,
              hint: 'Verifique os logs do Supabase Dashboard para mais detalhes'
            }
          }
        }
        
        return result
      } catch (error) {
        console.error('‚ùå Erro cr√≠tico no wrapper de signUp:', error)
        
        return {
          data: { user: null, session: null },
          error: {
            message: 'Erro cr√≠tico no sistema de autentica√ß√£o. Tente novamente.',
            status: 500
          }
        }
      }
    }

    // Fun√ß√£o auxiliar para hash de senha (simplificada)
    async function hashPassword(password: string): Promise<string> {
      // Em produ√ß√£o, usar bcrypt ou similar
      // Por enquanto, retornar um hash simples para teste
      const encoder = new TextEncoder()
      const data = encoder.encode(password + 'salt')
      const hashBuffer = await crypto.subtle.digest('SHA-256', data)
      const hashArray = Array.from(new Uint8Array(hashBuffer))
      return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')
    }

  } else {
    console.warn('Supabase n√£o configurado. Usando cliente mock.')
    supabase = createMockClient()
  }
} catch (error) {
  console.error('Erro ao inicializar Supabase:', error)
  supabase = createMockClient()
}

// Fun√ß√£o para verificar status do Supabase
export const getSupabaseStatus = async () => {
  if (!isSupabaseConfigured()) {
    return {
      status: 'not_configured',
      message: 'Supabase n√£o est√° configurado',
      timestamp: new Date().toISOString()
    }
  }

  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('id')
      .limit(1)

    if (error && error.code !== 'PGRST116') { // PGRST116 = tabela n√£o encontrada (ok para teste)
      throw error
    }

    return {
      status: 'connected',
      message: 'Supabase conectado com sucesso',
      timestamp: new Date().toISOString()
    }
  } catch (error: any) {
    return {
      status: 'error',
      message: error.message || 'Erro desconhecido',
      timestamp: new Date().toISOString()
    }
  }
}

// Fun√ß√£o auxiliar para logout for√ßado
export const forceLogout = async () => {
  try {
    console.log('üîÑ For√ßando logout...')
    
    // Tentar logout normal primeiro
    await supabase.auth.signOut({ scope: 'local' })
    
    // Limpar storage local
    if (typeof window !== 'undefined') {
      localStorage.removeItem('armazem-sao-joaquim-auth')
      localStorage.removeItem('sb-enolssforaepnrpfrima-auth-token')
      sessionStorage.clear()
      
      // Limpar cookies relacionados ao Supabase
      document.cookie.split(";").forEach(function(c) { 
        document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
      });
    }
    
    console.log('‚úÖ Logout for√ßado realizado')
    return { success: true }
  } catch (error) {
    console.error('‚ùå Erro no logout for√ßado:', error)
    return { success: false, error }
  }
}

// Exportar cliente
export { supabase }

// Fun√ß√£o para obter cliente (compatibilidade)
export const getSupabaseClient = () => supabase

// Fun√ß√£o para criar cliente mock (para testes)
export const createMockSupabaseClient = () => createMockClient()

export default supabase