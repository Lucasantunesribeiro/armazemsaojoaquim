import { Resend } from 'resend';
import { ENV } from './config';
import { ReservationConfirmation } from '../components/email-templates/ReservationConfirmation';
import { AdminNotification } from '../components/email-templates/AdminNotification';

// Inicializar Resend
const resend = new Resend(ENV.RESEND_API_KEY);

export interface ReservationData {
  id: string;
  nome: string;
  email: string;
  telefone: string;
  data: string;
  horario: string;
  pessoas: number;
  observacoes?: string;
  confirmationToken: string;
}

export class EmailService {
  private static instance: EmailService;
  private fromEmail = 'Armaz√©m S√£o Joaquim <onboarding@resend.dev>';
  private adminEmail = 'armazemsaojoaquimoficial@gmail.com';
  
  // Email alternativo para resposta (opcional)
  private replyToEmail = 'armazemsaojoaquimoficial@gmail.com';
  
  // Email do desenvolvedor para modo sandbox
  private developerEmail = 'lucas.afvr@gmail.com';

  public static getInstance(): EmailService {
    if (!EmailService.instance) {
      EmailService.instance = new EmailService();
    }
    return EmailService.instance;
  }

  /**
   * Envia email de confirma√ß√£o para o usu√°rio
   */
  async sendReservationConfirmation(reservationData: ReservationData): Promise<{ success: boolean; error?: string }> {
    try {
      if (!ENV.RESEND_API_KEY) {
        console.warn('‚ùå RESEND_API_KEY n√£o configurada. Email n√£o ser√° enviado.');
        return { success: false, error: 'Configura√ß√£o de email n√£o encontrada' };
      }

      console.log('üìß Enviando email de confirma√ß√£o para:', reservationData.email);

      const { data, error } = await resend.emails.send({
        from: this.fromEmail,
        reply_to: this.replyToEmail, // Permite resposta para o email real
        to: [reservationData.email],
        subject: `üìß Confirme sua Reserva - Armaz√©m S√£o Joaquim`,
        react: ReservationConfirmation({
          nome: reservationData.nome,
          data: reservationData.data,
          horario: reservationData.horario,
          pessoas: reservationData.pessoas,
          observacoes: reservationData.observacoes,
          confirmationToken: reservationData.confirmationToken,
          siteUrl: ENV.SITE_URL,
        }) as any,
      });

      if (error) {
        console.error('‚ùå Erro ao enviar email de confirma√ß√£o:', error);
        return { success: false, error: error.message };
      }

      console.log('‚úÖ Email de confirma√ß√£o enviado com sucesso:', data?.id);
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erro no servi√ßo de email:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  /**
   * Detecta se estamos em modo sandbox (desenvolvimento)
   */
  private isSandboxMode(): boolean {
    return this.fromEmail.includes('onboarding@resend.dev');
  }

  /**
   * Retorna o email de destino correto baseado no modo
   */
  private getAdminEmailForMode(): string {
    if (this.isSandboxMode()) {
      console.log('üß™ Modo SANDBOX detectado - enviando para email do desenvolvedor');
      return this.developerEmail;
    }
    return this.adminEmail;
  }

  /**
   * Envia notifica√ß√£o para o admin quando reserva √© confirmada
   */
  async sendAdminNotification(reservationData: ReservationData): Promise<{ success: boolean; error?: string }> {
    try {
      if (!ENV.RESEND_API_KEY) {
        console.warn('‚ùå RESEND_API_KEY n√£o configurada. Email n√£o ser√° enviado.');
        return { success: false, error: 'Configura√ß√£o de email n√£o encontrada' };
      }

      const destinationEmail = this.getAdminEmailForMode();
      console.log('üìß Enviando notifica√ß√£o admin para:', destinationEmail);
      
      if (this.isSandboxMode()) {
        console.log('‚ö†Ô∏è  MODO SANDBOX: Email ser√° enviado para', destinationEmail, 'em vez de', this.adminEmail);
        console.log('üí° Para enviar para o email real, configure um dom√≠nio verificado no Resend');
      }

      const { data, error } = await resend.emails.send({
        from: this.fromEmail,
        reply_to: reservationData.email, // Permite resposta direta para o cliente
        to: [destinationEmail],
        subject: `üîî Nova Reserva Confirmada - ${reservationData.nome}`,
        react: AdminNotification({
          nome: reservationData.nome,
          email: reservationData.email,
          telefone: reservationData.telefone,
          data: reservationData.data,
          horario: reservationData.horario,
          pessoas: reservationData.pessoas,
          observacoes: reservationData.observacoes,
          reservationId: reservationData.id,
        }) as any,
      });

      if (error) {
        console.error('‚ùå Erro ao enviar notifica√ß√£o para admin:', error);
        
        // Se falhar e estivermos em sandbox, tentar com email do desenvolvedor
        if (error.message?.includes('validation_error') && !this.isSandboxMode()) {
          console.log('üîÑ Tentando enviar para email do desenvolvedor devido a erro de valida√ß√£o...');
          return this.sendAdminNotificationFallback(reservationData);
        }
        
        return { success: false, error: error.message };
      }

      console.log('‚úÖ Notifica√ß√£o para admin enviada com sucesso:', data?.id);
      
      if (this.isSandboxMode()) {
        console.log('üìù NOTA: Em produ√ß√£o, este email seria enviado para:', this.adminEmail);
      }
      
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erro no servi√ßo de email para admin:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  /**
   * Fallback para enviar notifica√ß√£o quando h√° erro de valida√ß√£o
   */
  private async sendAdminNotificationFallback(reservationData: ReservationData): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('üîÑ FALLBACK: Enviando para email do desenvolvedor');
      
      const { data, error } = await resend.emails.send({
        from: this.fromEmail,
        reply_to: reservationData.email,
        to: [this.developerEmail],
        subject: `üîî [SANDBOX] Nova Reserva Confirmada - ${reservationData.nome}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background-color: #ffc107; color: #212529; padding: 15px; text-align: center; margin-bottom: 20px;">
              <h2 style="margin: 0;">‚ö†Ô∏è MODO SANDBOX - RESEND</h2>
              <p style="margin: 5px 0 0 0;">Este email deveria ser enviado para: <strong>${this.adminEmail}</strong></p>
            </div>
            
            <div style="background-color: #dc3545; color: white; padding: 20px; text-align: center;">
              <h1 style="margin: 0; font-size: 24px;">üîî Nova Reserva Confirmada</h1>
              <p style="margin: 5px 0 0 0; font-size: 14px; opacity: 0.9;">Armaz√©m S√£o Joaquim - Sistema de Reservas</p>
            </div>
            
            <div style="padding: 30px 20px; background-color: #ffffff;">
              <div style="background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 15px; margin: 0 0 25px 0;">
                <p style="margin: 0; font-size: 16px; color: #155724; font-weight: bold;">‚úÖ Uma nova reserva foi confirmada pelo cliente!</p>
              </div>
              
              <div style="background-color: #f8f9fa; border: 1px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0;">
                <h3 style="color: #dc3545; margin-top: 0;">üë§ Dados do Cliente</h3>
                <ul style="list-style: none; padding: 0; margin: 0;">
                  <li style="margin-bottom: 10px;"><strong>Nome Completo:</strong> ${reservationData.nome}</li>
                  <li style="margin-bottom: 10px;"><strong>E-mail:</strong> <a href="mailto:${reservationData.email}" style="color: #007bff; margin-left: 5px;">${reservationData.email}</a></li>
                  <li style="margin-bottom: 10px;"><strong>Telefone:</strong> <a href="tel:${reservationData.telefone}" style="color: #007bff; margin-left: 5px;">${reservationData.telefone}</a></li>
                </ul>
              </div>
              
              <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin: 20px 0;">
                <h3 style="color: #856404; margin-top: 0;">üìÖ Detalhes da Reserva</h3>
                <ul style="list-style: none; padding: 0; margin: 0;">
                  <li style="margin-bottom: 10px;"><strong>üìÖ Data:</strong> ${new Date(reservationData.data).toLocaleDateString('pt-BR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</li>
                  <li style="margin-bottom: 10px;"><strong>üïê Hor√°rio:</strong> ${reservationData.horario}</li>
                  <li style="margin-bottom: 10px;"><strong>üë• N√∫mero de Pessoas:</strong> ${reservationData.pessoas} ${reservationData.pessoas === 1 ? 'pessoa' : 'pessoas'}</li>
                  <li style="margin-bottom: 10px;"><strong>üÜî ID da Reserva:</strong> ${reservationData.id}</li>
                  ${reservationData.observacoes ? `<li style="margin-bottom: 10px;"><strong>üìù Observa√ß√µes:</strong> ${reservationData.observacoes}</li>` : ''}
                </ul>
              </div>
              
              <div style="background-color: #ffc107; border: 1px solid #ffca2c; border-radius: 8px; padding: 15px; margin: 20px 0;">
                <p style="margin: 0; color: #212529; font-weight: bold;">
                  ‚ö†Ô∏è IMPORTANTE: Para receber emails no endere√ßo real (${this.adminEmail}), 
                  configure um dom√≠nio verificado no Resend.
                </p>
              </div>
            </div>
            
            <div style="background-color: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666;">
              <p style="margin: 0 0 10px 0;">
                <strong>Sistema de Reservas - Armaz√©m S√£o Joaquim</strong><br/>
                Este email foi enviado automaticamente quando o cliente confirmou a reserva.
              </p>
              <p style="margin: 0;">Data/Hora do envio: ${new Date().toLocaleString('pt-BR')}</p>
            </div>
          </div>
        `,
      });

      if (error) {
        console.error('‚ùå Erro no fallback:', error);
        return { success: false, error: error.message };
      }

      console.log('‚úÖ Email de fallback enviado com sucesso:', data?.id);
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erro no fallback:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  /**
   * Envia email simples (para outros usos)
   */
  async sendSimpleEmail({
    to,
    subject,
    html,
    text,
    replyTo
  }: {
    to: string;
    subject: string;
    html?: string;
    text?: string;
    replyTo?: string;
  }): Promise<{ success: boolean; error?: string }> {
    try {
      if (!ENV.RESEND_API_KEY) {
        console.warn('‚ùå RESEND_API_KEY n√£o configurada. Email n√£o ser√° enviado.');
        return { success: false, error: 'Configura√ß√£o de email n√£o encontrada' };
      }

      const emailOptions: any = {
        from: this.fromEmail,
        to: [to],
        subject,
      };

      if (replyTo) emailOptions.reply_to = replyTo;
      if (html) emailOptions.html = html;
      if (text) emailOptions.text = text;
      if (!html && !text) emailOptions.text = 'Email sem conte√∫do';

      console.log('üìß Enviando email simples para:', to);

      const { data, error } = await resend.emails.send(emailOptions);

      if (error) {
        console.error('‚ùå Erro ao enviar email simples:', error);
        return { success: false, error: error.message };
      }

      console.log('‚úÖ Email simples enviado com sucesso:', data?.id);
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erro no servi√ßo de email simples:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  /**
   * Valida se o servi√ßo de email est√° configurado
   */
  isConfigured(): boolean {
    return !!ENV.RESEND_API_KEY;
  }

  /**
   * Testa a configura√ß√£o do email
   */
  async testConfiguration(): Promise<{ success: boolean; error?: string }> {
    try {
      if (!ENV.RESEND_API_KEY) {
        return { success: false, error: 'RESEND_API_KEY n√£o configurada' };
      }

      console.log('üß™ Testando configura√ß√£o de email...');

      // Teste simples enviando para o pr√≥prio admin
      const { data, error } = await resend.emails.send({
        from: this.fromEmail,
        reply_to: this.replyToEmail,
        to: [this.adminEmail],
        subject: 'üß™ Teste de Configura√ß√£o - Armaz√©m S√£o Joaquim',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h1 style="color: #dc3545;">üß™ Teste de Configura√ß√£o</h1>
            <p>Este √© um email de teste para verificar a configura√ß√£o do Resend.</p>
            <p><strong>Status:</strong> ‚úÖ Email service funcionando corretamente!</p>
            <p><strong>Data/Hora:</strong> ${new Date().toLocaleString('pt-BR')}</p>
            <hr>
            <p style="font-size: 12px; color: #666;">
              Enviado de: ${this.fromEmail}<br>
              Sistema: Armaz√©m S√£o Joaquim
            </p>
          </div>
        `,
      });

      if (error) {
        console.error('‚ùå Erro no teste:', error);
        return { success: false, error: error.message };
      }

      console.log('‚úÖ Teste enviado com sucesso:', data?.id);
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erro no teste de configura√ß√£o:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  /**
   * Retorna informa√ß√µes sobre a configura√ß√£o atual
   */
  getConfiguration() {
    const isSandbox = this.isSandboxMode();
    return {
      isConfigured: this.isConfigured(),
      fromEmail: this.fromEmail,
      adminEmail: this.adminEmail,
      replyToEmail: this.replyToEmail,
      hasApiKey: !!ENV.RESEND_API_KEY,
      isSandboxMode: isSandbox,
      actualDestinationEmail: this.getAdminEmailForMode(),
      developerEmail: this.developerEmail,
      note: isSandbox ? 'Modo SANDBOX: Emails ser√£o enviados para o desenvolvedor' : 'Modo PRODU√á√ÉO: Emails ser√£o enviados para o admin'
    };
  }
}

// Exportar inst√¢ncia singleton
export const emailService = EmailService.getInstance(); 