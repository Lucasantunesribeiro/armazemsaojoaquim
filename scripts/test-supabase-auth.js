const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

console.log('üîç DIAGN√ìSTICO SUPABASE AUTH')
console.log('================================')
console.log('URL:', supabaseUrl)
console.log('Key (primeiros 20 chars):', supabaseKey?.substring(0, 20) + '...')

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testSupabaseConnection() {
  try {
    console.log('\nüîÑ Testando conex√£o com Supabase...')
    
    // Teste 1: Verificar se o Supabase est√° acess√≠vel
    const { data, error } = await supabase.auth.getSession()
    
    if (error) {
      console.error('‚ùå Erro ao conectar:', error.message)
      return false
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida')
    
    // Teste 2: Verificar configura√ß√µes de auth
    console.log('\nüîÑ Testando configura√ß√µes de autentica√ß√£o...')
    
    // Tentar fazer signup com email de teste
    const testEmail = 'teste-diagnostico@example.com'
    const testPassword = 'senha123456'
    
    console.log(`üìß Tentando registrar usu√°rio de teste: ${testEmail}`)
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          full_name: 'Teste Diagn√≥stico',
          name: 'Teste Diagn√≥stico'
        }
      }
    })
    
    if (signUpError) {
      console.error('‚ùå Erro no signup:', signUpError.message)
      console.error('C√≥digo do erro:', signUpError.status)
      console.error('Detalhes:', signUpError)
      
      // Verificar tipos espec√≠ficos de erro
      if (signUpError.message?.includes('signup is disabled')) {
        console.log('\nüí° SOLU√á√ÉO: O signup est√° desabilitado no Supabase')
        console.log('   1. Acesse o painel do Supabase')
        console.log('   2. V√° em Authentication > Settings')
        console.log('   3. Habilite "Enable email confirmations"')
        console.log('   4. Habilite "Enable sign ups"')
      }
      
      if (signUpError.message?.includes('Invalid email')) {
        console.log('\nüí° SOLU√á√ÉO: Email inv√°lido ou dom√≠nio n√£o permitido')
      }
      
      if (signUpError.status === 500) {
        console.log('\nüí° POSS√çVEL CAUSA: Erro interno do Supabase')
        console.log('   - Verifique se o projeto est√° ativo')
        console.log('   - Verifique se as chaves est√£o corretas')
        console.log('   - Verifique se h√° limites de quota excedidos')
      }
      
      return false
    }
    
    console.log('‚úÖ Signup funcionando corretamente')
    console.log('Usu√°rio criado:', signUpData.user?.email)
    console.log('Confirma√ß√£o necess√°ria:', !signUpData.user?.email_confirmed_at)
    
    // Teste 3: Verificar se consegue fazer login
    console.log('\nüîÑ Testando login...')
    
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    })
    
    if (signInError) {
      if (signInError.message?.includes('Email not confirmed')) {
        console.log('‚ö†Ô∏è  Email n√£o confirmado (esperado para novos usu√°rios)')
      } else {
        console.error('‚ùå Erro no login:', signInError.message)
      }
    } else {
      console.log('‚úÖ Login funcionando')
    }
    
    // Limpeza: tentar deletar o usu√°rio de teste
    if (signUpData.user) {
      console.log('\nüßπ Limpando usu√°rio de teste...')
      await supabase.auth.signOut()
    }
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error)
    return false
  }
}

async function checkSupabaseSettings() {
  console.log('\nüîÑ Verificando configura√ß√µes do projeto...')
  
  try {
    // Tentar acessar uma tabela p√∫blica para verificar se o projeto est√° ativo
    const { data, error } = await supabase
      .from('reservas')
      .select('count')
      .limit(1)
    
    if (error) {
      console.error('‚ùå Erro ao acessar banco de dados:', error.message)
      
      if (error.message?.includes('relation "public.reservas" does not exist')) {
        console.log('üí° Tabela "reservas" n√£o existe - execute as migra√ß√µes')
      }
      
      if (error.message?.includes('JWT')) {
        console.log('üí° Problema com autentica√ß√£o JWT - verifique as chaves')
      }
      
      return false
    }
    
    console.log('‚úÖ Banco de dados acess√≠vel')
    return true
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar configura√ß√µes:', error)
    return false
  }
}

async function main() {
  const connectionOk = await testSupabaseConnection()
  const settingsOk = await checkSupabaseSettings()
  
  console.log('\nüìä RESUMO DO DIAGN√ìSTICO')
  console.log('========================')
  console.log('Conex√£o Supabase:', connectionOk ? '‚úÖ OK' : '‚ùå ERRO')
  console.log('Configura√ß√µes:', settingsOk ? '‚úÖ OK' : '‚ùå ERRO')
  
  if (!connectionOk || !settingsOk) {
    console.log('\nüîß PR√ìXIMOS PASSOS:')
    console.log('1. Verifique o painel do Supabase em https://supabase.com/dashboard')
    console.log('2. Confirme que o projeto est√° ativo e n√£o pausado')
    console.log('3. Verifique as configura√ß√µes de Authentication')
    console.log('4. Confirme que as vari√°veis de ambiente est√£o corretas')
    
    process.exit(1)
  }
  
  console.log('\nüéâ Supabase configurado corretamente!')
}

main().catch(console.error) 