#!/usr/bin/env node

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

console.log('üöÄ Iniciando build de produ√ß√£o otimizado...\n')

// Fun√ß√£o para executar comandos
const exec = (command, description) => {
  console.log(`üì¶ ${description}...`)
  try {
    execSync(command, { stdio: 'inherit' })
    console.log(`‚úÖ ${description} conclu√≠do\n`)
  } catch (error) {
    console.error(`‚ùå Erro em ${description}:`, error.message)
    process.exit(1)
  }
}

// Fun√ß√£o para verificar se o arquivo existe
const fileExists = (filePath) => {
  return fs.existsSync(path.join(process.cwd(), filePath))
}

// Fun√ß√£o para criar diret√≥rio se n√£o existir
const ensureDir = (dirPath) => {
  const fullPath = path.join(process.cwd(), dirPath)
  if (!fs.existsSync(fullPath)) {
    fs.mkdirSync(fullPath, { recursive: true })
    console.log(`üìÅ Diret√≥rio criado: ${dirPath}`)
  }
}

// Verificar depend√™ncias
console.log('üîç Verificando depend√™ncias...')
if (!fileExists('package.json')) {
  console.error('‚ùå package.json n√£o encontrado')
  process.exit(1)
}

if (!fileExists('next.config.js')) {
  console.error('‚ùå next.config.js n√£o encontrado')
  process.exit(1)
}

// Verificar se sharp est√° instalado
try {
  require.resolve('sharp')
  console.log('‚úÖ Sharp encontrado')
} catch (error) {
  console.log('üì¶ Instalando Sharp...')
  exec('npm install sharp', 'Instala√ß√£o do Sharp')
}

// Criar diret√≥rios necess√°rios
ensureDir('public')
ensureDir('scripts')

// 1. Gerar √≠cones PWA
if (fileExists('public/favicon.svg')) {
  exec('node scripts/generate-icons.js', 'Gera√ß√£o de √≠cones PWA')
} else {
  console.log('‚ö†Ô∏è  favicon.svg n√£o encontrado, pulando gera√ß√£o de √≠cones')
}

// 2. Otimizar imagens
if (fileExists('scripts/optimize-images.js')) {
  exec('node scripts/optimize-images.js', 'Otimiza√ß√£o de imagens')
} else {
  console.log('‚ö†Ô∏è  Script de otimiza√ß√£o de imagens n√£o encontrado')
}

// 3. Verificar vari√°veis de ambiente
console.log('üîß Verificando vari√°veis de ambiente...')
const requiredEnvVars = [
  'NEXT_PUBLIC_SUPABASE_URL',
  'NEXT_PUBLIC_SUPABASE_ANON_KEY',
  'NEXT_PUBLIC_SITE_URL'
]

const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar])
if (missingEnvVars.length > 0) {
  console.warn(`‚ö†Ô∏è  Vari√°veis de ambiente faltando: ${missingEnvVars.join(', ')}`)
  console.warn('   Certifique-se de configur√°-las no Netlify')
}

// 4. Limpar cache do Next.js
console.log('üßπ Limpando cache...')
try {
  execSync('rm -rf .next', { stdio: 'inherit' })
  console.log('‚úÖ Cache limpo\n')
} catch (error) {
  console.log('‚ÑπÔ∏è  Cache j√° estava limpo\n')
}

// 5. Type checking
exec('npm run type-check', 'Verifica√ß√£o de tipos TypeScript')

// 6. Linting
exec('npm run lint', 'Verifica√ß√£o de c√≥digo (ESLint)')

// 7. Build do Next.js
exec('npm run build', 'Build do Next.js')

// 8. Verificar se o build foi bem-sucedido
if (!fileExists('.next')) {
  console.error('‚ùå Build falhou - diret√≥rio .next n√£o encontrado')
  process.exit(1)
}

// 9. An√°lise do bundle (opcional)
if (process.env.ANALYZE === 'true') {
  console.log('üìä Analisando bundle...')
  try {
    exec('npx @next/bundle-analyzer', 'An√°lise do bundle')
  } catch (error) {
    console.log('‚ÑπÔ∏è  Bundle analyzer n√£o dispon√≠vel, pulando an√°lise')
  }
}

// 10. Verificar tamanho dos arquivos
console.log('üìè Verificando tamanho dos arquivos...')
try {
  const buildDir = path.join(process.cwd(), '.next')
  const staticDir = path.join(buildDir, 'static')
  
  if (fs.existsSync(staticDir)) {
    const getDirectorySize = (dirPath) => {
      let totalSize = 0
      const files = fs.readdirSync(dirPath, { withFileTypes: true })
      
      for (const file of files) {
        const filePath = path.join(dirPath, file.name)
        if (file.isDirectory()) {
          totalSize += getDirectorySize(filePath)
        } else {
          totalSize += fs.statSync(filePath).size
        }
      }
      
      return totalSize
    }
    
    const totalSize = getDirectorySize(staticDir)
    const sizeInMB = (totalSize / (1024 * 1024)).toFixed(2)
    
    console.log(`üì¶ Tamanho total dos assets: ${sizeInMB} MB`)
    
    if (totalSize > 10 * 1024 * 1024) { // 10MB
      console.warn('‚ö†Ô∏è  Assets s√£o grandes (>10MB). Considere otimizar imagens e c√≥digo.')
    }
  }
} catch (error) {
  console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel calcular o tamanho dos arquivos')
}

// 11. Gerar relat√≥rio de build
console.log('üìã Gerando relat√≥rio de build...')
const buildReport = {
  timestamp: new Date().toISOString(),
  nodeVersion: process.version,
  platform: process.platform,
  environment: process.env.NODE_ENV || 'production',
  success: true,
  steps: [
    'Gera√ß√£o de √≠cones PWA',
    'Otimiza√ß√£o de imagens',
    'Verifica√ß√£o de tipos',
    'Linting',
    'Build do Next.js'
  ]
}

try {
  fs.writeFileSync(
    path.join(process.cwd(), 'build-report.json'),
    JSON.stringify(buildReport, null, 2)
  )
  console.log('‚úÖ Relat√≥rio de build salvo em build-report.json\n')
} catch (error) {
  console.log('‚ö†Ô∏è  N√£o foi poss√≠vel salvar o relat√≥rio de build\n')
}

// 12. Dicas de otimiza√ß√£o
console.log('üí° Dicas de otimiza√ß√£o:')
console.log('   ‚Ä¢ Certifique-se de que todas as imagens est√£o otimizadas')
console.log('   ‚Ä¢ Use lazy loading para componentes n√£o cr√≠ticos')
console.log('   ‚Ä¢ Configure cache headers no Netlify')
console.log('   ‚Ä¢ Monitore Core Web Vitals em produ√ß√£o')
console.log('   ‚Ä¢ Use preload para recursos cr√≠ticos')

console.log('\nüéâ Build de produ√ß√£o conclu√≠do com sucesso!')
console.log('üöÄ Pronto para deploy no Netlify!')

// Verificar se √© deploy do Netlify
if (process.env.NETLIFY) {
  console.log('\nüåê Deploy do Netlify detectado')
  console.log('   ‚Ä¢ Build ID:', process.env.BUILD_ID || 'N/A')
  console.log('   ‚Ä¢ Deploy URL:', process.env.DEPLOY_URL || 'N/A')
  console.log('   ‚Ä¢ Branch:', process.env.BRANCH || 'N/A')
} 