#!/usr/bin/env node

/**
 * Script para testar o sistema de email localmente
 * Armaz√©m S√£o Joaquim
 */

const fs = require('fs');
const path = require('path');

// Fun√ß√£o para carregar vari√°veis de ambiente
function loadEnvVars() {
    const envLocalPath = path.join(__dirname, '..', '.env.local');
    const envExamplePath = path.join(__dirname, '..', 'env.example');
    
    let envFile = envLocalPath;
    
    if (!fs.existsSync(envLocalPath)) {
        console.log('‚ö†Ô∏è  Arquivo .env.local n√£o encontrado, usando env.example para refer√™ncia');
        envFile = envExamplePath;
    }
    
    if (fs.existsSync(envFile)) {
        const envContent = fs.readFileSync(envFile, 'utf8');
        const envLines = envContent.split('\n');
        
        envLines.forEach(line => {
            const trimmedLine = line.trim();
            if (trimmedLine && !trimmedLine.startsWith('#')) {
                const [key, ...valueParts] = trimmedLine.split('=');
                if (key && valueParts.length > 0) {
                    const value = valueParts.join('=').replace(/^["']|["']$/g, '');
                    process.env[key] = value;
                }
            }
        });
    }
}

// Carregar vari√°veis de ambiente
loadEnvVars();

console.log('üß™ TESTE LOCAL DE EMAIL - ARMAZ√âM S√ÉO JOAQUIM');
console.log('=============================================');
console.log('');

async function testEmailService() {
    try {
        // Como estamos em Node.js, vamos simular o teste sem importar diretamente
        // Vamos testar via API local
        console.log('‚ö†Ô∏è  Testando via API local (servidor deve estar rodando)');
        
        console.log('üìß TESTANDO CONFIGURA√á√ÉO DO EMAIL SERVICE');
        console.log('=========================================');
        
        const config = emailService.getConfiguration();
        
        console.log('üìã Configura√ß√£o atual:');
        console.log('   - Configurado:', config.isConfigured ? '‚úÖ' : '‚ùå');
        console.log('   - From Email:', config.fromEmail);
        console.log('   - Admin Email:', config.adminEmail);
        console.log('   - Reply To:', config.replyToEmail);
        console.log('   - Modo Sandbox:', config.isSandboxMode ? 'üß™ SIM' : 'üöÄ N√ÉO');
        console.log('   - Email de Destino Real:', config.actualDestinationEmail);
        console.log('   - Developer Email:', config.developerEmail);
        console.log('   - Nota:', config.note);
        console.log('');
        
        if (!config.isConfigured) {
            console.log('‚ùå Email service n√£o est√° configurado. Verifique as vari√°veis de ambiente.');
            return;
        }
        
        console.log('üß™ TESTANDO DETEC√á√ÉO DE SANDBOX');
        console.log('===============================');
        
        if (config.isSandboxMode) {
            console.log('‚úÖ Modo SANDBOX detectado corretamente');
            console.log('üìß Emails ser√£o enviados para:', config.developerEmail);
            console.log('üí° Para enviar para o email real, configure um dom√≠nio verificado no Resend');
        } else {
            console.log('‚úÖ Modo PRODU√á√ÉO detectado');
            console.log('üìß Emails ser√£o enviados para:', config.adminEmail);
        }
        console.log('');
        
        console.log('üì¨ TESTANDO NOTIFICA√á√ÉO PARA ADMIN');
        console.log('==================================');
        
        const testReservation = {
            id: 'test-local-' + Date.now(),
            nome: 'Maria Silva (TESTE LOCAL)',
            email: 'maria.teste@email.com',
            telefone: '21987654321',
            data: '2025-08-15',
            horario: '20:00:00',
            pessoas: 6,
            observacoes: 'Anivers√°rio - mesa especial',
            confirmationToken: 'test-token-local-' + Date.now()
        };
        
        console.log('üìù Dados da reserva teste:');
        console.log('   - Nome:', testReservation.nome);
        console.log('   - Email:', testReservation.email);
        console.log('   - Data:', testReservation.data);
        console.log('   - Hor√°rio:', testReservation.horario);
        console.log('   - Pessoas:', testReservation.pessoas);
        console.log('   - Observa√ß√µes:', testReservation.observacoes);
        console.log('');
        
        console.log('üì§ Enviando email de notifica√ß√£o...');
        
        const result = await emailService.sendAdminNotification(testReservation);
        
        if (result.success) {
            console.log('‚úÖ Email enviado com sucesso!');
            console.log('üéâ O sistema de detec√ß√£o de sandbox est√° funcionando corretamente');
            
            if (config.isSandboxMode) {
                console.log('üìß Email foi enviado para:', config.developerEmail);
                console.log('üí° Em produ√ß√£o, seria enviado para:', config.adminEmail);
            } else {
                console.log('üìß Email foi enviado para:', config.adminEmail);
            }
        } else {
            console.log('‚ùå Erro ao enviar email:', result.error);
        }
        
        console.log('');
        console.log('üéØ RESUMO DO TESTE');
        console.log('==================');
        console.log('‚úÖ Configura√ß√£o:', config.isConfigured ? 'OK' : 'FALHA');
        console.log('‚úÖ Detec√ß√£o Sandbox:', config.isSandboxMode !== undefined ? 'OK' : 'FALHA');
        console.log('‚úÖ Envio de Email:', result.success ? 'OK' : 'FALHA');
        console.log('');
        
        if (result.success) {
            console.log('üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!');
            console.log('');
            console.log('üîÑ PR√ìXIMOS PASSOS:');
            console.log('   1. Fa√ßa uma reserva real no site');
            console.log('   2. Confirme a reserva clicando no link do email');
            console.log('   3. Verifique se o email de notifica√ß√£o chegou no destino correto');
            
            if (config.isSandboxMode) {
                console.log('');
                console.log('‚ö†Ô∏è  IMPORTANTE: Voc√™ est√° em modo SANDBOX');
                console.log('   Para receber emails no endere√ßo real do restaurante:');
                console.log('   1. Configure um dom√≠nio verificado no Resend');
                console.log('   2. Altere o fromEmail para usar esse dom√≠nio');
                console.log('   3. O sistema automaticamente detectar√° e enviar√° para o admin real');
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error.message);
        console.error('Stack:', error.stack);
    }
}

// Executar teste
testEmailService().catch(console.error); 