#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

console.log('üöÄ Iniciando otimiza√ß√£o de performance...\n')

// Configura√ß√µes
const config = {
  imageDir: path.join(__dirname, '../public/images'),
  maxImageSize: 500 * 1024, // 500KB
  targetFormats: ['webp', 'avif'],
  compressionQuality: 85
}

// Fun√ß√£o para verificar se um comando existe
function commandExists(command) {
  try {
    execSync(`which ${command}`, { stdio: 'ignore' })
    return true
  } catch {
    return false
  }
}

// Fun√ß√£o para obter tamanho do arquivo
function getFileSize(filePath) {
  try {
    const stats = fs.statSync(filePath)
    return stats.size
  } catch {
    return 0
  }
}

// Fun√ß√£o para formatar tamanho em bytes
function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes'
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

// Fun√ß√£o para otimizar imagens
async function optimizeImages() {
  console.log('üì∏ Verificando imagens...')
  
  if (!fs.existsSync(config.imageDir)) {
    console.log('‚ùå Diret√≥rio de imagens n√£o encontrado')
    return
  }

  const imageExtensions = ['.jpg', '.jpeg', '.png', '.webp']
  const files = fs.readdirSync(config.imageDir, { recursive: true })
    .filter(file => {
      const ext = path.extname(file).toLowerCase()
      return imageExtensions.includes(ext)
    })

  console.log(`üìä Encontradas ${files.length} imagens`)

  let totalSavings = 0
  let optimizedCount = 0
  const largeImages = []

  for (const file of files) {
    const filePath = path.join(config.imageDir, file)
    const fileSize = getFileSize(filePath)
    
    if (fileSize > config.maxImageSize) {
      largeImages.push({
        path: file,
        size: fileSize,
        formattedSize: formatBytes(fileSize)
      })
    }

    // Verificar se j√° existe vers√£o WebP
    const baseName = path.parse(file).name
    const webpPath = path.join(config.imageDir, `${baseName}.webp`)
    
    if (!fs.existsSync(webpPath) && !file.endsWith('.webp')) {
      // Criar vers√£o WebP se poss√≠vel
      if (commandExists('cwebp')) {
        try {
          execSync(`cwebp -q ${config.compressionQuality} "${filePath}" -o "${webpPath}"`, { stdio: 'ignore' })
          const webpSize = getFileSize(webpPath)
          const savings = fileSize - webpSize
          if (savings > 0) {
            totalSavings += savings
            optimizedCount++
            console.log(`‚úÖ ${file} ‚Üí ${baseName}.webp (${formatBytes(savings)} economizados)`)
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è  Erro ao otimizar ${file}`)
        }
      }
    }
  }

  if (largeImages.length > 0) {
    console.log('\n‚ö†Ô∏è  Imagens grandes encontradas (>500KB):')
    largeImages.forEach(img => {
      console.log(`   ${img.path} - ${img.formattedSize}`)
    })
  }

  console.log(`\nüìà Resumo da otimiza√ß√£o:`)
  console.log(`   Imagens otimizadas: ${optimizedCount}`)
  console.log(`   Economia total: ${formatBytes(totalSavings)}`)
  
  if (!commandExists('cwebp')) {
    console.log('\nüí° Dica: Instale webp-tools para otimiza√ß√£o autom√°tica:')
    console.log('   sudo apt-get install webp (Ubuntu/Debian)')
    console.log('   brew install webp (macOS)')
  }
}

// Fun√ß√£o para verificar bundle size
function analyzeBundleSize() {
  console.log('\nüì¶ Analisando tamanho do bundle...')
  
  const nextDir = path.join(__dirname, '../.next')
  if (!fs.existsSync(nextDir)) {
    console.log('‚ùå Build n√£o encontrado. Execute "npm run build" primeiro.')
    return
  }

  try {
    // Verificar tamanho dos chunks principais
    const staticDir = path.join(nextDir, 'static')
    if (fs.existsSync(staticDir)) {
      const chunks = []
      
      function scanDirectory(dir, prefix = '') {
        const items = fs.readdirSync(dir)
        for (const item of items) {
          const itemPath = path.join(dir, item)
          const stat = fs.statSync(itemPath)
          
          if (stat.isDirectory()) {
            scanDirectory(itemPath, `${prefix}${item}/`)
          } else if (item.endsWith('.js')) {
            chunks.push({
              name: `${prefix}${item}`,
              size: stat.size,
              formattedSize: formatBytes(stat.size)
            })
          }
        }
      }
      
      scanDirectory(staticDir)
      
      // Ordenar por tamanho
      chunks.sort((a, b) => b.size - a.size)
      
      console.log('üìä Top 10 maiores chunks JavaScript:')
      chunks.slice(0, 10).forEach((chunk, index) => {
        console.log(`   ${index + 1}. ${chunk.name} - ${chunk.formattedSize}`)
      })
      
      const totalSize = chunks.reduce((sum, chunk) => sum + chunk.size, 0)
      console.log(`\nüìà Tamanho total do JavaScript: ${formatBytes(totalSize)}`)
    }
  } catch (error) {
    console.log('‚ùå Erro ao analisar bundle:', error.message)
  }
}

// Fun√ß√£o para verificar configura√ß√µes de performance
function checkPerformanceConfig() {
  console.log('\n‚öôÔ∏è  Verificando configura√ß√µes de performance...')
  
  const checks = [
    {
      name: 'next.config.js otimizado',
      check: () => {
        const configPath = path.join(__dirname, '../next.config.js')
        if (!fs.existsSync(configPath)) return false
        const config = fs.readFileSync(configPath, 'utf8')
        return config.includes('swcMinify') && config.includes('optimizeCss')
      }
    },
    {
      name: 'Compress√£o habilitada',
      check: () => {
        const configPath = path.join(__dirname, '../next.config.js')
        if (!fs.existsSync(configPath)) return false
        const config = fs.readFileSync(configPath, 'utf8')
        return config.includes('compress: true')
      }
    },
    {
      name: 'Headers de cache configurados',
      check: () => {
        const configPath = path.join(__dirname, '../next.config.js')
        if (!fs.existsSync(configPath)) return false
        const config = fs.readFileSync(configPath, 'utf8')
        return config.includes('Cache-Control')
      }
    },
    {
      name: 'Otimiza√ß√£o de imagens configurada',
      check: () => {
        const configPath = path.join(__dirname, '../next.config.js')
        if (!fs.existsSync(configPath)) return false
        const config = fs.readFileSync(configPath, 'utf8')
        return config.includes('formats:') && config.includes('webp')
      }
    }
  ]

  checks.forEach(check => {
    const status = check.check() ? '‚úÖ' : '‚ùå'
    console.log(`   ${status} ${check.name}`)
  })
}

// Fun√ß√£o para gerar recomenda√ß√µes
function generateRecommendations() {
  console.log('\nüí° Recomenda√ß√µes de performance:')
  
  const recommendations = [
    '1. Use OptimizedImage em vez de <img> tags',
    '2. Implemente lazy loading para imagens below-the-fold',
    '3. Minimize o uso de useEffect desnecess√°rios',
    '4. Use React.memo para componentes que n√£o mudam frequentemente',
    '5. Implemente code splitting para rotas',
    '6. Use dynamic imports para componentes pesados',
    '7. Otimize fontes com font-display: swap',
    '8. Minimize o JavaScript n√£o utilizado',
    '9. Use service workers para cache',
    '10. Implemente preloading para recursos cr√≠ticos'
  ]

  recommendations.forEach(rec => console.log(`   ${rec}`))
}

// Fun√ß√£o principal
async function main() {
  try {
    await optimizeImages()
    analyzeBundleSize()
    checkPerformanceConfig()
    generateRecommendations()
    
    console.log('\nüéâ Otimiza√ß√£o de performance conclu√≠da!')
    console.log('\nüìã Pr√≥ximos passos:')
    console.log('   1. Execute "npm run build" para aplicar otimiza√ß√µes')
    console.log('   2. Teste com "npm run lighthouse" para verificar melhorias')
    console.log('   3. Deploy e monitore as m√©tricas Core Web Vitals')
    
  } catch (error) {
    console.error('‚ùå Erro durante otimiza√ß√£o:', error.message)
    process.exit(1)
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main()
}

module.exports = {
  optimizeImages,
  analyzeBundleSize,
  checkPerformanceConfig,
  generateRecommendations
} 