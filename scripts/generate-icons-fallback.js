#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

console.log('üé® Gera√ß√£o de √≠cones PWA - Modo Fallback (sem Sharp)\n')

// Script de fallback que cria √≠cones b√°sicos sem Sharp
// √ötil quando Sharp n√£o est√° dispon√≠vel no ambiente de build

function createBasicIcons() {
  const publicDir = path.join(process.cwd(), 'public')
  
  // Verificar se j√° existem √≠cones
  const iconsToCheck = [
    'favicon.ico',
    'apple-touch-icon.png',
    'pwa-192x192.png',
    'pwa-512x512.png'
  ]
  
  const existingIcons = iconsToCheck.filter(icon => 
    fs.existsSync(path.join(publicDir, icon))
  )
  
  if (existingIcons.length === iconsToCheck.length) {
    console.log('‚úÖ Todos os √≠cones necess√°rios j√° existem')
    console.log('   √çcones encontrados:', existingIcons.join(', '))
    return true
  }
  
  console.log('‚ÑπÔ∏è  Alguns √≠cones est√£o faltando:', 
    iconsToCheck.filter(icon => !existingIcons.includes(icon)).join(', ')
  )
  
  // Verificar se existe favicon.svg para usar como base
  const faviconSvg = path.join(publicDir, 'favicon.svg')
  if (fs.existsSync(faviconSvg)) {
    console.log('‚úÖ favicon.svg encontrado')
    console.log('‚ÑπÔ∏è  Voc√™ pode usar ferramentas online para gerar √≠cones:')
    console.log('   ‚Ä¢ https://realfavicongenerator.net/')
    console.log('   ‚Ä¢ https://favicon.io/')
    console.log('   ‚Ä¢ https://www.pwa-icon-generator.com/')
  }
  
  // Criar manifest.json b√°sico se n√£o existir
  const manifestPath = path.join(publicDir, 'manifest.json')
  if (!fs.existsSync(manifestPath)) {
    const basicManifest = {
      name: "Armaz√©m S√£o Joaquim",
      short_name: "Armaz√©m SJ",
      description: "Restaurante tradicional em Santa Teresa - Rio de Janeiro",
      start_url: "/",
      display: "standalone",
      background_color: "#FFFFFF",
      theme_color: "#8B4513",
      orientation: "portrait",
      icons: [
        {
          src: "/pwa-192x192.png",
          sizes: "192x192",
          type: "image/png"
        },
        {
          src: "/pwa-512x512.png",
          sizes: "512x512",
          type: "image/png"
        }
      ]
    }
    
    try {
      fs.writeFileSync(manifestPath, JSON.stringify(basicManifest, null, 2))
      console.log('‚úÖ manifest.json b√°sico criado')
    } catch (error) {
      console.warn('‚ö†Ô∏è  N√£o foi poss√≠vel criar manifest.json:', error.message)
    }
  }
  
  // Criar browserconfig.xml b√°sico se n√£o existir
  const browserconfigPath = path.join(publicDir, 'browserconfig.xml')
  if (!fs.existsSync(browserconfigPath)) {
    const browserconfig = `<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
    <msapplication>
        <tile>
            <square150x150logo src="/mstile-150x150.png"/>
            <TileColor>#8B4513</TileColor>
        </tile>
    </msapplication>
</browserconfig>`
    
    try {
      fs.writeFileSync(browserconfigPath, browserconfig)
      console.log('‚úÖ browserconfig.xml b√°sico criado')
    } catch (error) {
      console.warn('‚ö†Ô∏è  N√£o foi poss√≠vel criar browserconfig.xml:', error.message)
    }
  }
  
  console.log('\nüí° Dicas para produ√ß√£o:')
  console.log('   ‚Ä¢ Gere √≠cones PWA completos usando ferramentas online')
  console.log('   ‚Ä¢ Adicione Sharp como depend√™ncia para gera√ß√£o autom√°tica')
  console.log('   ‚Ä¢ Teste √≠cones em diferentes dispositivos')
  console.log('   ‚Ä¢ Valide manifest.json usando Chrome DevTools')
  
  return false
}

// Executar
try {
  const success = createBasicIcons()
  if (success) {
    console.log('\nüéâ √çcones verificados com sucesso!')
  } else {
    console.log('\n‚ö†Ô∏è  Algumas configura√ß√µes b√°sicas foram criadas')
    console.log('   Recomenda-se gerar √≠cones completos para produ√ß√£o')
  }
} catch (error) {
  console.error('‚ùå Erro no script de fallback:', error.message)
  console.log('‚ÑπÔ∏è  Continuando sem verifica√ß√£o de √≠cones...')
} 