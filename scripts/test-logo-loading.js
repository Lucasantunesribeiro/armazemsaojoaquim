#!/usr/bin/env node

/**
 * Script para testar o carregamento do logo e diagn√≥stico de problemas
 */

const fs = require('fs')
const path = require('path')

console.log('üîç Testando carregamento do logo...\n')

// Verificar arquivos locais do logo
const logoDir = path.join(__dirname, '..', 'public', 'images')
const logoFiles = ['logo.jpg', 'logo.avif', 'logo.webp', 'placeholder.svg']

console.log('üìÇ Verificando arquivos locais do logo:')
logoFiles.forEach(file => {
  const filePath = path.join(logoDir, file)
  if (fs.existsSync(filePath)) {
    const stats = fs.statSync(filePath)
    const sizeKB = (stats.size / 1024).toFixed(1)
    console.log(`‚úÖ ${file} - ${sizeKB}KB`)
  } else {
    console.log(`‚ùå ${file} - N√ÉO ENCONTRADO`)
  }
})

console.log('\nüîç Verificando estrutura do componente Logo:')
const logoComponentPath = path.join(__dirname, '..', 'components', 'atoms', 'Logo.tsx')
if (fs.existsSync(logoComponentPath)) {
  console.log('‚úÖ Componente Logo.tsx encontrado')
  
  // Ler e analisar o conte√∫do
  const logoContent = fs.readFileSync(logoComponentPath, 'utf8')
  
  // Verificar se est√° usando o caminho correto
  if (logoContent.includes('/images/logo.jpg')) {
    console.log('‚úÖ Caminho da imagem est√° correto: /images/logo.jpg')
  } else {
    console.log('‚ùå Caminho da imagem pode estar incorreto')
  }
  
  // Verificar se tem fallback
  if (logoContent.includes('placeholder.svg')) {
    console.log('‚úÖ Fallback para placeholder.svg configurado')
  } else {
    console.log('‚ùå Fallback n√£o encontrado')
  }
  
  // Verificar se tem tratamento de erro
  if (logoContent.includes('onError')) {
    console.log('‚úÖ Tratamento de erro implementado')
  } else {
    console.log('‚ùå Tratamento de erro n√£o encontrado')
  }
} else {
  console.log('‚ùå Componente Logo.tsx n√£o encontrado')
}

console.log('\nüîç Verificando configura√ß√£o do Next.js:')
const nextConfigPath = path.join(__dirname, '..', 'next.config.js')
if (fs.existsSync(nextConfigPath)) {
  console.log('‚úÖ next.config.js encontrado')
  
  const nextConfig = fs.readFileSync(nextConfigPath, 'utf8')
  
  // Verificar se images est√° configurado
  if (nextConfig.includes('images:')) {
    console.log('‚úÖ Configura√ß√£o de imagens encontrada')
  } else {
    console.log('‚ùå Configura√ß√£o de imagens n√£o encontrada')
  }
  
  // Verificar se Supabase est√° configurado
  if (nextConfig.includes('supabase.co')) {
    console.log('‚úÖ Supabase Storage configurado')
  } else {
    console.log('‚ùå Supabase Storage n√£o configurado')
  }
} else {
  console.log('‚ùå next.config.js n√£o encontrado')
}

console.log('\nüìä DIAGN√ìSTICO:')
console.log('Se o logo n√£o est√° carregando, poss√≠veis causas:')
console.log('1. Arquivo logo.jpg corrompido ou inacess√≠vel')
console.log('2. Configura√ß√£o de otimiza√ß√£o de imagens no Next.js')
console.log('3. Problemas de cache do navegador')
console.log('4. Configura√ß√£o de CSP (Content Security Policy)')

console.log('\nüöÄ SOLU√á√ïES RECOMENDADAS:')
console.log('1. Limpar cache do navegador (Ctrl+F5)')
console.log('2. Verificar se o servidor de desenvolvimento est√° rodando')
console.log('3. Testar o acesso direto: http://localhost:3000/images/logo.jpg')
console.log('4. Verificar se n√£o h√° bloqueios de CORS ou CSP')

console.log('\nüí° TESTE MANUAL:')
console.log('Abra o navegador e acesse:')
console.log('http://localhost:3000/images/logo.jpg')
console.log('Se a imagem carregar diretamente, o problema √© no componente.')
console.log('Se n√£o carregar, o problema √© na configura√ß√£o do servidor.') 