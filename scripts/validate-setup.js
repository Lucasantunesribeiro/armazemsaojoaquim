#!/usr/bin/env node

/**
 * Script de Valida√ß√£o - Armaz√©m S√£o Joaquim
 * Verifica se todas as configura√ß√µes necess√°rias est√£o corretas
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç Validando configura√ß√£o do projeto...\n');

let errors = [];
let warnings = [];
let success = [];

// Fun√ß√£o para verificar arquivo
function checkFile(filePath, description) {
  if (fs.existsSync(filePath)) {
    success.push(`‚úÖ ${description}: ${filePath}`);
    return true;
  } else {
    errors.push(`‚ùå ${description} n√£o encontrado: ${filePath}`);
    return false;
  }
}

// Fun√ß√£o para verificar vari√°vel de ambiente
function checkEnvVar(varName, required = true, publicVar = false) {
  const value = process.env[varName];
  const prefix = publicVar ? 'NEXT_PUBLIC_' : '';
  
  if (value && value !== 'your-value-here' && value !== 'change-me') {
    success.push(`‚úÖ ${varName}: Configurada`);
    return true;
  } else if (required) {
    errors.push(`‚ùå Vari√°vel obrigat√≥ria n√£o configurada: ${varName}`);
    return false;
  } else {
    warnings.push(`‚ö†Ô∏è  Vari√°vel opcional n√£o configurada: ${varName}`);
    return false;
  }
}

// Fun√ß√£o para verificar depend√™ncia
function checkDependency(packageName, description) {
  try {
    require.resolve(packageName);
    success.push(`‚úÖ ${description}: ${packageName}`);
    return true;
  } catch (error) {
    errors.push(`‚ùå ${description} n√£o instalado: ${packageName}`);
    return false;
  }
}

// 1. Verificar arquivos cr√≠ticos
console.log('üìÅ Verificando arquivos cr√≠ticos...');
checkFile('package.json', 'Package.json');
checkFile('next.config.js', 'Configura√ß√£o Next.js');
checkFile('tailwind.config.js', 'Configura√ß√£o Tailwind');
checkFile('postcss.config.js', 'Configura√ß√£o PostCSS');
checkFile('app/api/reservas/route.ts', 'API de Reservas');
checkFile('supabase/migrations/001_create_reservations_table.sql', 'Migra√ß√£o de Reservas');
checkFile('env.example', 'Arquivo de exemplo de vari√°veis');

// 2. Verificar vari√°veis de ambiente
console.log('\nüîê Verificando vari√°veis de ambiente...');

// Tentar carregar .env.local
if (fs.existsSync('.env.local')) {
  require('dotenv').config({ path: '.env.local' });
  success.push('‚úÖ Arquivo .env.local encontrado');
} else {
  warnings.push('‚ö†Ô∏è  Arquivo .env.local n√£o encontrado (OK para produ√ß√£o)');
}

// Vari√°veis obrigat√≥rias
checkEnvVar('NEXT_PUBLIC_SUPABASE_URL', true, true);
checkEnvVar('NEXT_PUBLIC_SUPABASE_ANON_KEY', true, true);
checkEnvVar('NEXT_PUBLIC_SITE_URL', true, true);

// Vari√°veis importantes para funcionalidades
checkEnvVar('RESEND_API_KEY', true);

// Vari√°veis opcionais
checkEnvVar('NEXT_PUBLIC_GA_ID', false, true);
checkEnvVar('SUPABASE_SERVICE_ROLE_KEY', false);

// 3. Verificar depend√™ncias cr√≠ticas
console.log('\nüì¶ Verificando depend√™ncias...');
checkDependency('@supabase/supabase-js', 'Supabase Client');
checkDependency('@supabase/auth-helpers-nextjs', 'Supabase Auth Helpers');
checkDependency('resend', 'Resend Email Service');
checkDependency('react', 'React');
checkDependency('next', 'Next.js');
checkDependency('tailwindcss', 'Tailwind CSS');

// 4. Verificar configura√ß√µes espec√≠ficas
console.log('\n‚öôÔ∏è  Verificando configura√ß√µes...');

// Verificar se Tailwind tem plugins necess√°rios
try {
  const tailwindConfig = require(path.join(process.cwd(), 'tailwind.config.js'));
  if (tailwindConfig.plugins && tailwindConfig.plugins.length > 0) {
    success.push('‚úÖ Plugins do Tailwind configurados');
  } else {
    warnings.push('‚ö†Ô∏è  Nenhum plugin do Tailwind configurado');
  }
} catch (error) {
  errors.push('‚ùå Erro ao verificar configura√ß√£o do Tailwind');
}

// Verificar configura√ß√£o do PostCSS
try {
  const postcssConfig = require(path.join(process.cwd(), 'postcss.config.js'));
  if (postcssConfig.plugins) {
    success.push('‚úÖ PostCSS configurado corretamente');
  } else {
    errors.push('‚ùå PostCSS mal configurado');
  }
} catch (error) {
  errors.push('‚ùå Erro ao verificar configura√ß√£o do PostCSS');
}

// 5. Verificar se build pode ser executado
console.log('\nüèóÔ∏è  Testando build...');
try {
  // Verificar se next build pode ser executado (dry run)
  execSync('npx next info', { stdio: 'pipe' });
  success.push('‚úÖ Next.js configurado corretamente');
} catch (error) {
  errors.push('‚ùå Erro na configura√ß√£o do Next.js');
}

// 6. Verificar estrutura de pastas
console.log('\nüìÇ Verificando estrutura...');
const requiredDirs = [
  'app',
  'app/api',
  'app/api/reservas',
  'app/reservas',
  'components',
  'lib',
  'public',
  'supabase'
];

requiredDirs.forEach(dir => {
  if (fs.existsSync(dir)) {
    success.push(`‚úÖ Diret√≥rio encontrado: ${dir}`);
  } else {
    errors.push(`‚ùå Diret√≥rio n√£o encontrado: ${dir}`);
  }
});

// 7. Verificar templates de email
console.log('\nüìß Verificando templates de email...');
checkFile('components/email-templates/ReservationConfirmation.tsx', 'Template de Confirma√ß√£o');
checkFile('components/email-templates/AdminNotification.tsx', 'Template de Notifica√ß√£o Admin');

// 8. Verificar configura√ß√£o de deployment
console.log('\nüöÄ Verificando configura√ß√£o de deploy...');
checkFile('netlify.toml', 'Configura√ß√£o Netlify');
checkFile('scripts/netlify-build.js', 'Script de build Netlify');

// Relat√≥rio final
console.log('\n' + '='.repeat(60));
console.log('üìä RELAT√ìRIO DE VALIDA√á√ÉO');
console.log('='.repeat(60));

if (success.length > 0) {
  console.log('\n‚úÖ SUCESSOS:');
  success.forEach(msg => console.log(`  ${msg}`));
}

if (warnings.length > 0) {
  console.log('\n‚ö†Ô∏è  AVISOS:');
  warnings.forEach(msg => console.log(`  ${msg}`));
}

if (errors.length > 0) {
  console.log('\n‚ùå ERROS:');
  errors.forEach(msg => console.log(`  ${msg}`));
  
  console.log('\nüîß A√á√ïES NECESS√ÅRIAS:');
  console.log('  1. Corrija os erros listados acima');
  console.log('  2. Configure as vari√°veis de ambiente obrigat√≥rias');
  console.log('  3. Execute novamente este script');
  console.log('  4. Consulte o arquivo SETUP.md para instru√ß√µes detalhadas');
  
  process.exit(1);
} else {
  console.log('\nüéâ CONFIGURA√á√ÉO V√ÅLIDA!');
  console.log('  O projeto est√° pronto para ser executado em produ√ß√£o.');
  
  if (warnings.length > 0) {
    console.log('  Considere resolver os avisos para melhor funcionalidade.');
  }
  
  console.log('\nüìù PR√ìXIMOS PASSOS:');
  console.log('  1. Execute: npm run build');
  console.log('  2. Teste localmente: npm run dev');
  console.log('  3. Deploy para produ√ß√£o');
  console.log('  4. Configure monitoramento');
  
  process.exit(0);
} 