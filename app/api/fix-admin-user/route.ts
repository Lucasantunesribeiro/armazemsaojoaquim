import { NextRequest, NextResponse } from 'next/server'
import { createServerClient } from '@/lib/supabase'
import { cookies } from 'next/headers'

export async function POST(request: NextRequest) {
  try {
    console.log('üîß FIX ADMIN USER: Iniciando corre√ß√£o do usu√°rio admin...')
    
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)
    
    // 1. Verificar se o usu√°rio est√° logado
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    console.log('üîç FIX ADMIN USER: Session check:', {
      hasSession: !!session,
      sessionError: sessionError?.message,
      userId: session?.user?.id,
      userEmail: session?.user?.email
    })
    
    if (!session) {
      // Try to get user from cookies directly
      const cookies = request.headers.get('cookie')
      console.log('üîç FIX ADMIN USER: No session, checking cookies:', {
        hasCookies: !!cookies,
        cookieContent: cookies?.substring(0, 200) + '...' || 'No cookies'
      })
      
      return NextResponse.json({
        success: false,
        error: 'Usu√°rio n√£o est√° logado',
        debug: {
          sessionError: sessionError?.message,
          hasCookies: !!cookies
        }
      }, { status: 401 })
    }
    
    console.log('üîç FIX ADMIN USER: Usu√°rio logado:', {
      userId: session.user.id,
      email: session.user.email
    })
    
    // 2. Verificar se √© o admin
    if (session.user.email !== 'armazemsaojoaquimoficial@gmail.com') {
      return NextResponse.json({
        success: false,
        error: 'Apenas o admin pode executar esta opera√ß√£o'
      }, { status: 403 })
    }
    
    // 3. Verificar se j√° existe um usu√°rio com este ID na tabela public.users
    const { data: existingUser, error: existingUserError } = await supabase
      .from('users')
      .select('*')
      .eq('id', session.user.id)
      .single()
    
    console.log('üîç FIX ADMIN USER: Usu√°rio existente por ID:', {
      found: !!existingUser,
      data: existingUser,
      error: existingUserError?.message
    })
    
    if (existingUser) {
      // Se o usu√°rio j√° existe com o ID correto, apenas atualizar para admin
      const { data: updatedUser, error: updateError } = await supabase
        .from('users')
        .update({
          role: 'admin',
          updated_at: new Date().toISOString()
        })
        .eq('id', session.user.id)
        .select()
        .single()
      
      if (updateError) {
        console.error('‚ùå FIX ADMIN USER: Erro ao atualizar usu√°rio:', updateError)
        return NextResponse.json({
          success: false,
          error: `Erro ao atualizar usu√°rio: ${updateError.message}`
        }, { status: 500 })
      }
      
      console.log('‚úÖ FIX ADMIN USER: Usu√°rio atualizado com sucesso')
      return NextResponse.json({
        success: true,
        action: 'updated',
        user: updatedUser
      })
    }
    
    // 4. Verificar se existe um usu√°rio com este email (ID diferente)
    const { data: existingByEmail, error: existingByEmailError } = await supabase
      .from('users')
      .select('*')
      .eq('email', session.user.email)
      .single()
    
    console.log('üîç FIX ADMIN USER: Usu√°rio existente por email:', {
      found: !!existingByEmail,
      data: existingByEmail,
      error: existingByEmailError?.message
    })
    
    if (existingByEmail) {
      // Se existe um usu√°rio com o email mas ID diferente, deletar o antigo e criar novo
      console.log('üîÑ FIX ADMIN USER: Removendo usu√°rio com ID incorreto...')
      
      const { error: deleteError } = await supabase
        .from('users')
        .delete()
        .eq('id', existingByEmail.id)
      
      if (deleteError) {
        console.error('‚ùå FIX ADMIN USER: Erro ao deletar usu√°rio antigo:', deleteError)
        return NextResponse.json({
          success: false,
          error: `Erro ao deletar usu√°rio antigo: ${deleteError.message}`
        }, { status: 500 })
      }
      
      console.log('‚úÖ FIX ADMIN USER: Usu√°rio antigo removido')
    }
    
    // 5. Criar novo usu√°rio com o ID correto
    const { data: newUser, error: createError } = await supabase
      .from('users')
      .insert({
        id: session.user.id,
        email: session.user.email,
        name: session.user.user_metadata?.full_name || session.user.user_metadata?.name || 'Administrador Armaz√©m',
        role: 'admin',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single()
    
    if (createError) {
      console.error('‚ùå FIX ADMIN USER: Erro ao criar usu√°rio:', createError)
      return NextResponse.json({
        success: false,
        error: `Erro ao criar usu√°rio: ${createError.message}`
      }, { status: 500 })
    }
    
    console.log('‚úÖ FIX ADMIN USER: Novo usu√°rio criado com sucesso')
    return NextResponse.json({
      success: true,
      action: 'created',
      user: newUser
    })
    
  } catch (error: any) {
    console.error('‚ùå FIX ADMIN USER: Erro geral:', error)
    return NextResponse.json({
      success: false,
      error: error.message
    }, { status: 500 })
  }
}